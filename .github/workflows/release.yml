name: Build and Release

on:
  push:
    branches:
      - main   # Trigger on every push to main branch

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # âœ… fetch full history & tags

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyinstaller pyautogui opencv-python numpy pynput pillow

      - name: Verify files exist
        run: |
          dir src
          dir src\images
          echo "Files verified"

      - name: Build exe with spec file
        run: |
          cd src
          python -m PyInstaller MagicGardenBot.spec --clean

      - name: Verify build output
        run: |
          dir src\dist
          echo "Build complete"

      - name: Package release files
        run: |
          mkdir release
          copy src\dist\MagicGardenBot.exe release\
          copy README.md release\ 2>nul || echo "README.md not found, skipping"
          copy src\config.example.json release\ 2>nul || echo "config.example.json not found, skipping"
          echo "Creating release package..."
          powershell Compress-Archive -Path release\* -DestinationPath MagicGardenBot.zip -Force

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MagicGardenBot
          path: MagicGardenBot.zip

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo (for tags)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get latest tag
        id: get_latest
        run: |
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest=$latest" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump
        run: |
          latest="${{ steps.get_latest.outputs.latest }}"
          version="${latest#v}" # strip 'v'
          IFS='.' read -r major minor patch <<< "$version"
          patch=$((patch+1))
          new="v$major.$minor.$patch"
          echo "new_version=$new" >> $GITHUB_OUTPUT

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: MagicGardenBot

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: "MagicGardenBot.zip"
          tag_name: ${{ steps.bump.outputs.new_version }}
          name: "Release ${{ steps.bump.outputs.new_version }}"
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
